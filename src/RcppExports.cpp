// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// merge_columns_parallel
arma::vec merge_columns_parallel(const arma::umat& index_matrix, const arma::sp_mat& x_sp_mat);
RcppExport SEXP _SFE_merge_columns_parallel(SEXP index_matrixSEXP, SEXP x_sp_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type index_matrix(index_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type x_sp_mat(x_sp_matSEXP);
    rcpp_result_gen = Rcpp::wrap(merge_columns_parallel(index_matrix, x_sp_mat));
    return rcpp_result_gen;
END_RCPP
}
// calculate_count_shannon
arma::vec calculate_count_shannon(const arma::umat& index_matrix, const arma::vec& values_vector);
RcppExport SEXP _SFE_calculate_count_shannon(SEXP index_matrixSEXP, SEXP values_vectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type index_matrix(index_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type values_vector(values_vectorSEXP);
    rcpp_result_gen = Rcpp::wrap(calculate_count_shannon(index_matrix, values_vector));
    return rcpp_result_gen;
END_RCPP
}
// cal_shannon
NumericVector cal_shannon(arma::sp_mat x);
RcppExport SEXP _SFE_cal_shannon(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(cal_shannon(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SFE_merge_columns_parallel", (DL_FUNC) &_SFE_merge_columns_parallel, 2},
    {"_SFE_calculate_count_shannon", (DL_FUNC) &_SFE_calculate_count_shannon, 2},
    {"_SFE_cal_shannon", (DL_FUNC) &_SFE_cal_shannon, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SFE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
